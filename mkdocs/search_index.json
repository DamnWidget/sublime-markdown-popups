{
    "docs": [
        {
            "location": "/", 
            "text": "Sublime Markdown Popups\n\n\nPopup tooltips for Sublime generated with Markdown.\n\n\n\n\nOverview\n\n\nSublime Markdown Popups (mdpopups) is a library for Sublime Text plugins.  It utilizes the new plugin API found in ST3 Beta 3080+ for generating tooltip popups.  Mdpopups utilizes Python Markdown with a couple of special extensions to convert Markdown to HTML that can be used to create popups.  It also provides a number of other helpful API commands to aid in creating great tooltips.\n\n\nMdpopus provides both a dark and light CSS theme to style your popups, both of which can be overridden or extended.  Mdpopups will determine the brightness of your color scheme when deciding which theme to use.  If desired, a user can map their different color scheme files to custom tooltip CSS themes.\n\n\n\n\nFeatures\n\n\n\n\nCan take Markdown or HTML and create nice looking popup tooltips.\n\n\nProvides a dark and light theme.\n\n\nUses the current Sublime color scheme of a view to create matching tooltip themes.\n\n\nCan create syntax highlighed code blocks easily using either Pygments or the built-in Sublime Text syntax highlighter automatically in the Markdown environment or outside via API calls.\n\n\nCan create color preview boxes via API calls.\n\n\nA CSS template environment that allows users to override and tweak the overall look of the tooltip theme to better fit their preferred look.  Using the template filters, users can generically access color scheme colors and manipulate them.\n\n\nPlugins can extend the current CSS to inject plugin specific class styling.  Extended CSS will be run through the template environment.", 
            "title": "About Markdown Popups"
        }, 
        {
            "location": "/#sublime-markdown-popups", 
            "text": "Popup tooltips for Sublime generated with Markdown.", 
            "title": "Sublime Markdown Popups"
        }, 
        {
            "location": "/#overview", 
            "text": "Sublime Markdown Popups (mdpopups) is a library for Sublime Text plugins.  It utilizes the new plugin API found in ST3 Beta 3080+ for generating tooltip popups.  Mdpopups utilizes Python Markdown with a couple of special extensions to convert Markdown to HTML that can be used to create popups.  It also provides a number of other helpful API commands to aid in creating great tooltips.  Mdpopus provides both a dark and light CSS theme to style your popups, both of which can be overridden or extended.  Mdpopups will determine the brightness of your color scheme when deciding which theme to use.  If desired, a user can map their different color scheme files to custom tooltip CSS themes.", 
            "title": "Overview"
        }, 
        {
            "location": "/#features", 
            "text": "Can take Markdown or HTML and create nice looking popup tooltips.  Provides a dark and light theme.  Uses the current Sublime color scheme of a view to create matching tooltip themes.  Can create syntax highlighed code blocks easily using either Pygments or the built-in Sublime Text syntax highlighter automatically in the Markdown environment or outside via API calls.  Can create color preview boxes via API calls.  A CSS template environment that allows users to override and tweak the overall look of the tooltip theme to better fit their preferred look.  Using the template filters, users can generically access color scheme colors and manipulate them.  Plugins can extend the current CSS to inject plugin specific class styling.  Extended CSS will be run through the template environment.", 
            "title": "Features"
        }, 
        {
            "location": "/installation/", 
            "text": "Installation\n\n\nInstalling Sublime Markdown Popups.\n\n\n\n\nPackage Control\n\n\nIn order for your plugin to utilize Markdown Popups, you must be using Package Control, and you must add \nmdpopups\n as a dependency for your plugin.  This can be done in one of two ways, both of which are documented at Package Control\ns \ndocuments site\n; see \nUsing Dependencies\n.  Package Control will install the and update the dependency for you.  Package Control will also ensure that \nmdpopups\n is loaded before your plugin loads.\n\n\nRemember, Markdown Popups are for Sublime Text 3 builds 3080+.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#installation", 
            "text": "Installing Sublime Markdown Popups.", 
            "title": "Installation"
        }, 
        {
            "location": "/installation/#package-control", 
            "text": "In order for your plugin to utilize Markdown Popups, you must be using Package Control, and you must add  mdpopups  as a dependency for your plugin.  This can be done in one of two ways, both of which are documented at Package Control s  documents site ; see  Using Dependencies .  Package Control will install the and update the dependency for you.  Package Control will also ensure that  mdpopups  is loaded before your plugin loads.  Remember, Markdown Popups are for Sublime Text 3 builds 3080+.", 
            "title": "Package Control"
        }, 
        {
            "location": "/usage/", 
            "text": "User Guide\n\n\nUsing and configuring Sublime Markdown Popups.\n\n\n\n\nDependencies\n\n\nYour plugin must include the following Package Control dependencies:\n\n\n{\n\n    \n*\n:\n \n{\n\n        \n=3000\n:\n \n[\n\n            \npygments\n,\n\n            \nmarkdown\n,\n\n            \nmdpopups\n,\n\n            \njinja2\n,\n\n            \nmarkupsafe\n\n        \n]\n\n    \n}\n\n\n}\n\n\n\n\n\n\nMarkdown Support\n\n\nMdPopups uses \nPython Markdown\n to parse Markdown and transform it into a tooltip.  The Markdown environment supports basic Markdown features, but also includes a number of specialty extensions to enhance the environment.  To keep the experience standardized for plugin use, tweaking the Markdown settings is not allowed.\n\n\nMdPopups enables the following Python Markdown extensions:\n\n\n\n\nattr_list\n allows you to add HTML attributes to block and inline elements easily.\n\n\nnl2br\n turns new lines int \nbr\n tags.\n\n\ndef_list\n adds support for definition lists.\n\n\nadmonition\n provides admonition blocks.\n\n\ncodehilite\n provides syntax highlighted blocks.\n\n\n\n\nMdPopups also includes a couple 3\nrd\n party extensions (some of which have been modified to work better in the Sublime Text environment).\n\n\n\n\nsuperfences\n provides support for nested fenced blocks. UML support is disabled.\n\n\nbetterem\n is extension that aims to improve emphasis support in Python Markdown. MdPopups leaves it configured in its default state where underscores are handled intelligently: \n_handled_intelligently_\n \n \nhandled_intelligently\n.  Asterisks can be used to do mid word emphasis: \nem*pha*sis\n \n em\npha\nsis.\n\n\nmagiclink\n auto links HTML links.\n\n\ninlinehilite\n allows for inline code highlighting: \n`#!python import module`\n \n \nimport\n \nmodule\n.\n\n\n\n\nAPI Usage\n\n\nMdPopups provides a handful of accessible functions.\n\n\nshow_popup\n\n\n\n\nmdpopups.show_popup\n\n\n\n\nAccepts Markdown and creates a Sublime popup tooltip.  By default, the Pygments syntax highlighter will be used for code highlighting.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n in your \nPreferences.sublime-settings\n file if you would like to use the Sublime syntax highlighter.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\nYes\n\n\n\n\nMarkdown/HTML content to be used to create a tooltip.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converterted.\n\n\n\n\n\n\ncss\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nAdditional CSS that will be injected.\n\n\n\n\n\n\nflags\n\n\nint\n\n\nNo\n\n\n0\n\n\nFlags to pass down to the Sublime Text \nview.show_popup\ncall.\n\n\n\n\n\n\nlocation\n\n\nint\n\n\nNo\n\n\n-1\n\n\nLocation to show popup in view.  -1 means to show right under the first cursor.\n\n\n\n\n\n\nmax_width\n\n\nint\n\n\nNo\n\n\n320\n\n\nMaximum width of the popup.\n\n\n\n\n\n\nmax_height\n\n\nint\n\n\nNo\n\n\n240\n\n\nMaximum height of the popup.\n\n\n\n\n\n\non_navigate\n\n\nfunction\n\n\nNo\n\n\nNone\n\n\nCallback that receives one variable \nhref\n\n\n\n\n\n\non_hide\n\n\nfunction\n\n\nNo\n\n\nNone\n\n\nCallback for when the tooltip is hidden.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDevelopers Guidelines\n\n\nIf injecting your own CSS classes from a plugin, please namespace them by either giving them a very unique name (preferably with the plugin\ns name as part of the class) or use an additional namespace class (preferably with the plugin\ns name) and a specific class.  This way a user can target and override your class styling if desired.\n\n\nExample - Unique Class Name\n:\n\n\n.myplugin-myclass\n \n{\n \n...\n \n}\n\n\n\n\n\n\nExample - Namespace Class\n:\n\n\n.myplugin.myclass\n \n{\n \n...\n \n}\n\n\n\n\n\n\nAlso, do not try to override the style of existing base classes and elements with plugin injection, but use custom plugin classes so that you will only target what your plugin as specifically added special classes to.\n\n\n\n\nupdate_popup\n\n\n\n\nmdpopups.update_popup\n\n\n\n\nUpdates the current existing popup.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n in your \nPreferences.sublime-settings\n file if you would like to use the Sublime syntax highlighter.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\ncontent\n\n\nstring\n\n\nYes\n\n\n\n\nMarkdown/HTML content to be used to create a tooltip.\n\n\n\n\n\n\nmd\n\n\nbool\n\n\nNo\n\n\nTrue\n\n\nDefines whether the content is Markdown and needs to be converterted.\n\n\n\n\n\n\ncss\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nCSS text that should be used instead of loading a theme.\n\n\n\n\n\n\n\n\n\n\n\n\nhide_popup\n\n\n\n\nmdpopups.hide_popup\n\n\n\n\nHides the current popup.  Included for convenience and consistency.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nA Sublime Text view object.\n\n\n\n\n\n\n\n\n\n\n\n\nclear_cache\n\n\n\n\nmdpopups.clear_cache\n\n\nClears the CSS theme related caches.\n\n\n\n\nmd2html\n\n\n\n\nmdpopups.md2html\n\n\n\n\nExposes the Markdown to HTML converter in case it is desired to parse only a section of markdown.  This works well for someone who wants to work directly in HTML, but might want to still have fragments of markdown that they would like to occasionally convert. Code highlighting will use either Pygments or the native Sublime syntax highlighter.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n if you want to use the Sublime syntax highlighter.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nSublime text View object.\n\n\n\n\n\n\nmarkup\n\n\nbool\n\n\nYes\n\n\n\n\nThe markup code to be converted.\n\n\n\n\n\n\n\n\n\n\n\n\ncolor_box\n\n\n\n\nmdpopups.color_box\n\n\n\n\nGenerates a color preview box image encoded in base64 and formated to be inserted right in your your Markdown or HTML code as an \nimg\n tag.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncolors\n\n\n[string]\n\n\nYes\n\n\n\n\nA list of color strings formatted as \n#RRGGBBAA\nwhere \nR\nis the red channel, \nG\nis the green channel, \nB\nis the blue channel, and \nA\nis the alpha channel.\n\n\n\n\n\n\nborder\n\n\nstring\n\n\nYes\n\n\n\n\nThe color for the color box border.  Input is a RGB color formatted as \n#RRGGBB\n\n\n\n\n\n\nborder2\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nThe optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as \n#RRGGBB\n\n\n\n\n\n\nheight\n\n\nint\n\n\nNo\n\n\n32\n\n\nHeight of color box.\n\n\n\n\n\n\nwidth\n\n\nint\n\n\nNo\n\n\n32\n\n\nWidth of color box.\n\n\n\n\n\n\nborder_size\n\n\nint\n\n\nNo\n\n\n1\n\n\nWidth of the color box border.  If using \nborder2\n the value should be set to at least 2 to see both colors.\n\n\n\n\n\n\ncheck_size\n\n\nint\n\n\nNo\n\n\n4\n\n\nSize of checkered box squares used for the background of transparent colors.\n\n\n\n\n\n\nmax_colors\n\n\nint\n\n\nNo\n\n\n5\n\n\nMax number of colors that will be evaluated in the \ncolors\nparameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.\n\n\n\n\n\n\n\n\n\n\n\n\nsyntax_highlight\n\n\n\n\nmdpopups.syntax_highlight\n\n\n\n\nAllows for syntax highlighting outside the Markdown environment.  You can just feed it code directly and give it the language of your choice, and you will be returned a block of HTML that has been syntax highlighted.  This does not have to be in markdown format.  Just give it plain text to convert to highlighted HTML. \nsyntax_highlight\n will use either Pygments or the native Sublime syntax highlighter.  Set \nmdpopups.use_sublime_highlighter\n to \ntrue\n if you want to use the Sublime syntax highlighter.\n\n\n\n\n\n\n\n\nParameter\n\n\nType\n\n\nRequired\n\n\nDefault\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nview\n\n\nsublime.View\n\n\nYes\n\n\n\n\nSublime text View object.\n\n\n\n\n\n\nsrc\n\n\nstring\n\n\nYes\n\n\n\n\nThe source code to be converted.  No \n```\n needed.\n\n\n\n\n\n\nlanguage\n\n\nstring\n\n\nNo\n\n\nNone\n\n\nSpecifies the language to highlight as.\n\n\n\n\n\n\ninline\n\n\nbool\n\n\nNo\n\n\nFalse\n\n\nWill return the code formatted for inline display.\n\n\n\n\n\n\n\n\n\n\n\n\nGlobal User Settings\n\n\nAll settings for MdPopups\nare placed in Sublime's\nPreferences.sublime-settings`.  They are global and work no for whatever plugin uses the MdPopups API.\n\n\nmdpopups.debug\n\n\nTurns on debug mode.  This will dump out all sorts of info to the console.  Such as content before parsing to HTML, final HTML output, etc.  This is more useful for plugin developers.\n\n\n    \nmdpopups.debug\n:\n \ntrue\n,\n\n\n\n\n\n\nmdpopups.disable\n\n\nGlobal kill switch to prevent popups (created by MdPopups) from appearing.\n\n\n    \nmdpopups.disable\n:\n \ntrue\n,\n\n\n\n\n\n\nmdpopups.cache_refresh_time\n\n\nControl how long a CSS theme file will be in the cache before being refreshed.  Value should be a positive integer greater than 0.  Units are in minutes.  Default is 30.\n\n\n    \nmdpopups.cache_refresh_time\n:\n \n30\n,\n\n\n\n\n\n\nmdpopups.cache_limit\n\n\nControl how many CSS theme files will be kept in cache at any given time.  Value should be a positive integer greater than or equal to 0.\n\n\n    \nmdpopups.cache_limit\n:\n \n10\n\n\n\n\n\n\nmdpopups.use_sublime_highlighter\n\n\nControls whether the Pygments or the native Sublime syntax highlighter is used for code highlighting.  This affects code highlighting in Markdown conversion] via and when \nmd2html\n and when code is directly processed using \nsyntax_highlight\n. To learn more about the syntax highlighter see \nSyntax Highlighting\n.\n\n\n    \nmdpopups.use_sublime_highlighter\n:\n \ntrue\n\n\n\n\n\n\nmdpopups.user_css\n\n\nOverrides the default CSS theme.  Value should be a relative path pointing to the CSS theme file: \nPackages/User/my_custom_theme.css\n.  Slashes should be forward slashes. By default, it will point to \nPackages/User/mdpopups.css\n.\n\n\n    \nmdpopups.use_sublime_highlighter\n:\n \nPackages/User/mdpopups.css\n\n\n\n\n\n\nmdpopups.sublime_user_lang_map\n\n\nThis is a special setting allowing the mapping of personal syntax languages which are not yet included or will not be included in the official mapping table.  You can either define your own new entry, or use the name of an existing entry to extend language keywords or syntax languages.  When extending, user keywords and languages will be cycled through first.\n\n\n    \nmdpopups.sublime_user_lang_map\n:\n \n{\n\n        \nlanguage\n:\n \n((\nkeywords\n,),\n \n(\nMyPackage/MySyntaxLanguage\n))\n\n    \n}\n\n\n\n\n\n\nExample\n:\n\n\nmdpopups.sublime_user_lang_map\n:\n \n{\n\n    \njavascript\n:\n \n((\njavascript\n,\n \njs\n),\n \n(\nJavaScript/JavaScript\n,\n \nJavaScriptNext - ES6 Syntax/JavaScriptNext\n))\n\n\n}\n\n\n\n\n\n\nFor a list of all currently supported syntax mappings, see the official \nmapping file\n.\n\n\nSyntax Highlighting\n\n\nMdPopups has two syntax highlighting methods: one is Pygments, the other is Sublimes native syntax highlighters.  When developing a plugin, it is wise to test out both as a syntax mapping may be needed for the Sublime Syntax Highlighter; mappings can be added locally and/or to the main repository via pull requests.\n\n\nPygments\n\n\nPygments has a great variety of highlighters out of the box.  It also comes with a number of built-in color schemes that can be used.  Pygments themes are loaded up using the \nCSS template\n.  You can either specify an existing one, paste your own in.  Due to the limitations of the Sublime HTML and CSS engine, you must format your personal Pygments them to work well.\n\n\nTraditionally Pygments CSS classes are given not only syntax classes applied to each span, but an overall class as assigned to the div wrapper as well.  For instance, a class for whitespace may look like this (where \n.highlight\n is the div wrapper\ns class and \n.w\n i the span\ns class):\n\n\n.highlight\n \n.w\n \n{\n \ncolor\n:\n \n#cccccc\n \n}\n \n/* Text.Whitespace */\n\n\n\n\n\n\nBut the sublime CSS engine doesn\nt support parent and child classes like \n.highlight\n \n.w\n; it supports either single or multiple classes on one element like \n.class1.class2\n.  Because of this, the \n.highlight\n class must be stripped out.\n\n\n.w\n \n{\n \ncolor\n:\n \n#cccccc\n \n}\n \n/* Text.Whitespace */\n\n\n\n\n\n\nMdPopups also needs both classes \n.highlgiht\n and \n.inline-highlight\n to be styled with the foreground and background color:\n\n\n.highlight\n,\n \n.inline-highlight\n \n{\n \nbackground-color\n:\n \n#f8f8f8\n;\n \ncolor\n:\n \n#4d4d4c\n \n}\n\n\n\n\n\n\nFull Example\n:\n\n\n.highlight\n,\n \n.inline-highlight\n \n{\n \nbackground-color\n:\n \n#f8f8f8\n;\n \ncolor\n:\n \n#4d4d4c\n \n}\n\n\n.c\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment */\n\n\n.err\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Error */\n\n\n.k\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword */\n\n\n.l\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal */\n\n\n.n\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name */\n\n\n.o\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Operator */\n\n\n.p\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Punctuation */\n\n\n.cm\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Multiline */\n\n\n.cp\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Comment.Preproc */\n\n\n.c1\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Single */\n\n\n.cs\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Comment.Special */\n\n\n.gd\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Generic.Deleted */\n\n\n.ge\n \n{\n \nfont-style\n:\n \nitalic\n \n}\n \n/* Generic.Emph */\n\n\n.gh\n \n{\n \ncolor\n:\n \n#4d4d4c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Heading */\n\n\n.gi\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Generic.Inserted */\n\n\n.gp\n \n{\n \ncolor\n:\n \n#8e908c\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Prompt */\n\n\n.gs\n \n{\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Strong */\n\n\n.gu\n \n{\n \ncolor\n:\n \n#3e999f\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Generic.Subheading */\n\n\n.kc\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Constant */\n\n\n.kd\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Declaration */\n\n\n.kn\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Namespace */\n\n\n.kp\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Pseudo */\n\n\n.kr\n \n{\n \ncolor\n:\n \n#8959a8\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Reserved */\n\n\n.kt\n \n{\n \ncolor\n:\n \n#eab700\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Keyword.Type */\n\n\n.ld\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.Date */\n\n\n.m\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number */\n\n\n.s\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String */\n\n\n.na\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Attribute */\n\n\n.nb\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Builtin */\n\n\n.nc\n \n{\n \ncolor\n:\n \n#c82829\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Class */\n\n\n.no\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Constant */\n\n\n.nd\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Name.Decorator */\n\n\n.ni\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Entity */\n\n\n.ne\n \n{\n \ncolor\n:\n \n#c82829\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Exception */\n\n\n.nf\n \n{\n \ncolor\n:\n \n#4271ae\n;\n \nfont-weight\n:\n \nbold\n \n}\n \n/* Name.Function */\n\n\n.nl\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Label */\n\n\n.nn\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Namespace */\n\n\n.nx\n \n{\n \ncolor\n:\n \n#4271ae\n \n}\n \n/* Name.Other */\n\n\n.py\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Name.Property */\n\n\n.nt\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Tag */\n\n\n.nv\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable */\n\n\n.ow\n \n{\n \ncolor\n:\n \n#3e999f\n \n}\n \n/* Operator.Word */\n\n\n.w\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Text.Whitespace */\n\n\n.mb\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Bin */\n\n\n.mf\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Float */\n\n\n.mh\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Hex */\n\n\n.mi\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Integer */\n\n\n.mo\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Oct */\n\n\n.sb\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Backtick */\n\n\n.sc\n \n{\n \ncolor\n:\n \n#4d4d4c\n \n}\n \n/* Literal.String.Char */\n\n\n.sd\n \n{\n \ncolor\n:\n \n#8e908c\n \n}\n \n/* Literal.String.Doc */\n\n\n.s2\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Double */\n\n\n.se\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.String.Escape */\n\n\n.sh\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Heredoc */\n\n\n.si\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.String.Interpol */\n\n\n.sx\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Other */\n\n\n.sr\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Regex */\n\n\n.s1\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Single */\n\n\n.ss\n \n{\n \ncolor\n:\n \n#718c00\n \n}\n \n/* Literal.String.Symbol */\n\n\n.bp\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Name.Builtin.Pseudo */\n\n\n.vc\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Class */\n\n\n.vg\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Global */\n\n\n.vi\n \n{\n \ncolor\n:\n \n#c82829\n \n}\n \n/* Name.Variable.Instance */\n\n\n.il\n \n{\n \ncolor\n:\n \n#f5871f\n \n}\n \n/* Literal.Number.Integer.Long */\n\n\n\n\n\n\nSublime Syntax Highlighter\n\n\nMdPopups can also use Sublime\ns internal syntax highlighter to highlight your code.  The benefit here is that you get code highlighting in your popup that matches your current theme.  The highlighting ability is dependent upon what syntax packages you have installed in Sublime.  It also depends on whether they are enabled and mapped to a language keyword.  Pull requests are welcome to expand and keep the \nlanguage mapping\n updated.  You can also define in your \nPreferences.sublime-settings\n file additional mappings to either personal syntax files, or while waiting for your mapping changes to be merged and released.  See \nmdpopups.sublime_user_lang_map\n for more info.\n\n\nIn your CSS template it is usually a good idea to generically specify the code wrapper background colors.  With the \nCSS templates\n, this is very easy:\n\n\n.highlight\n,\n \n.inline-highlight\n \n{\n \n{{\n.background\n|\ncss\n}}\n \n}\n\n\n\n\n\n\nCSS Styling\n\n\nMdPopups was design to give a universal way of displaying and styling tooltips via plugins, but also provide the user an easy way to control the look.\n\n\nMdPopups provides a simple base CSS that styles the basic HTML tags that can be used in the Markdown parser.  On top of that it then parses your current Sublime color scheme and generates CSS that includes styling for all the \nstandard TextMate scopes\n (and only those listed scopes) found in your color scheme.  It then uses those scopes via in a default template to highlight your tooltips to match your current color scheme.\n\n\nTemplates are used so that a user can easily tap into all the colors, color filters, and other usefull logic to control their tooltips in one place without having to hard code a specific CSS for a specific color scheme.  Even though a plugin can additionally insert new scopes on demand when calling the popup API, a user can override anything and everything by providing their own \nCSS template\n.  The template is fairly powerful and flexible.\n\n\nCSS Templates\n\n\nMdPoups provides a \nbase.css\n that formats the general look of the HTML elements (padding, size, etc.).  On top of that, it provides a \ndefault.css\n template which applies more superficial styling such as colors, Pygments themes, etc.  It uses the Jinja2 template environment to give direct access to things like color scheme colors, names, and other useful information.  In general, \ndefault.css\n should provide most of what everyone \nneeds\n.  But if you \nwant\n greater control, you can create your own CSS template which MdPopups will use instead of \ndefault.css\n.\n\n\nTemplate Colors\n\n\nWith the template environment, colors from the current Sublime color scheme can be accessed and manipulated.  Access to the Sublime color scheme styles are done via the \ncss\n filter.\n\n\n\n\ncss\n\n\n\n\nRetrieves the style for a specific TextMate scope from a Sublime color scheme.  By specifying either \n.foreground\n, \n.background\n, or anyone of the standard TextMate scopes and then paring it with the \ncss\n filter, all the related styles of the specified scope will be inserted into the css document.\n\n\nExample\n:\n\n\nThis:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\n.comment\n|\ncss\n}}\n \n}\n\n\n\n\n\n\nMight become this:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \ncolor\n:\n \n#888888\n,\n \nfont-style\n:\n \nitalic\n \n}\n\n\n\n\n\n\nIf you need to get at a specific CSS attribute, you can specify its name in the \ncss\n filter (available attributes are \ncolor\n, \nbackground-color\n, \nfont-style\n, and \nfont-weight\n).\n\n\nThis:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\n.comment\n|\ncss\n(\ncolor\n)\n}}\n \n}\n\n\n\n\n\n\nWould then only include the color:\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \ncolor\n:\n \n#888888\n \n}\n\n\n\n\n\n\nSome scopes might not be have colors assigned to them in a them, so multiple scopes can be defined, and the first one that matches will be used:\n\n\n/* If `keyword.operator` is not explicitly used, fallback to `.keyword` */\n\n\nh1\n,\n \nh2\n,\n \nh3\n,\n \nh4\n,\n \nh5\n,\n \nh6\n \n{\n \n{{\n.keyword.operator, .keyword\n|\ncss\n(\ncolor\n)\n}}\n \n}\n\n\n\n\n\n\n\n\n\n\nIf desired you can convert a foreground color to a background color or vice versa.  To convert to a foreground color, you can use the \nforeground\n filter.  To convert to a background color, you can use the \nbackground\n filter.\n\n\n\n\nforeground\n\n\n\n\nConvert a background to a foreground.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nforeground\n}}\n \n}\n\n\n\n\n\n\n\n\nbackground\n\n\n\n\nConvert a foreground to a background.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n.foreground\n|\ncss\n(\ncolor\n)|\nbackground\n}}\n \n}\n\n\n\n\n\n\n\n\n\n\nTemplate Color Filtering\n\n\nMdPopups also provides a number of color filters within the template environment that can manipulate the colors.  For instance, lets say you had your tooltip is the same color as the view window and it is difficult to see where the tooltip starts and ends.  You can take the color schemes background and apply a brightness filter to it allowing you now see the tooltip clearly.\n\n\nHere we can make the background of the tooltip darker:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n\n\n\n\nColor filters take a single color attribute of the form \nkey: value;\n.  So when feeding the filter with CSS, it is advised to specify the attribute in the \ncss\n filter to limit the return to only one attribute as shown above; it may be difficult to tell how many attributes \ncss\n could return without explicitly specifying attribute.  Color filters only take either \ncolor\n or \nbackground-color\n attributes.\n\n\nFilters can be chained if more intensity is needed as some filters may clamp the value in one call. Multiple kinds of filters can also be chained together.  These are all the available filters:\n\n\n\n\nbrightness\n\n\n\n\nShifts brightness either dark or lighter. Brightness is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.\n\n\nExample - Darken\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n\n\n\n\nExample - Lighten\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n1.1\n)\n}}\n \n}\n\n\n\n\n\n\n\n\nsaturation\n\n\n\n\nShifts the saturation either to right (saturate) or the left (desaturate).  Saturation is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.\n\n\nExample - Desaturate\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nsaturation\n(\n0.9\n)\n}}\n \n}\n\n\n\n\n\n\nExample - Saturate\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nsaturation\n(\n1.1\n)\n}}\n \n}\n\n\n\n\n\n\n\n\ngrayscale\n\n\n\n\nFilters all colors to a grayish tone.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\ngrayscale\n}}\n \n}\n\n\n\n\n\n\n\n\nsepia\n\n\n\n\nFilters all colors to a sepia tone.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nsepia\n}}\n \n}\n\n\n\n\n\n\n\n\ninvert\n\n\n\n\nInverts a color.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\ninvert\n}}\n \n}\n\n\n\n\n\n\n\n\ncolorize\n\n\n\n\nFilters all colors to a shade of the specified hue.  Think grayscale, but instead of gray, you define a non-gray hue.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.\n\n\nExample\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\ncolorize\n(\n30\n)\n}}\n \n}\n\n\n\n\n\n\n\n\nhue\n\n\n\n\nShifts the current hue either to the left or right.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Values can either be negative to shift left or positive to shift the hue to the right.\n\n\nExample - Left Shift\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nhue\n(-\n30\n)\n}}\n \n}\n\n\n\n\n\n\nExample - Left Right\n:\n\n\nbody\n \n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nhue\n(\n30\n)\n}}\n \n}\n\n\n\n\n\n\n\n\nfade\n\n\n\n\nFades a color. Essentially it is like apply transparency to the color allowing the color schemes base background color to show through.\n\n\nExample - Fade 50%\n:\n\n\nbody\n \n{\n \n{{\n.foreground\n|\ncss\n(\ncolor\n)|\nfade\n(\n0.5\n)\n}}\n \n}\n\n\n\n\n\n\n\n\n\n\nInclude CSS\n\n\nThe template environment allows for retrieving built-in Pygments CSS or retrieving CSS resources from the Sublime Packages.\n\n\n\n\npygments\n\n\n\n\nRetrieve a built-in Pygments color scheme.\n\n\nExample\n:\n\n\n{{\nnative\n|\npygments\n}}\n\n\n\n\n\n\n\n\ngetcss\n\n\n\n\nRetrieve a CSS file from Sublime\ns \nPackages\n folder.  CSS retrieved in this manner can include template variables and filters.\n\n\nExample\n:\n\n\n{{\nPackages/User/aprosopo-dark.css\n|\ngetcss\n}}\n\n\n\n\n\n\n\n\n\n\nTemplate Variables\n\n\nThe template environment provides a couple of variables that can be used to conditionally alter the CSS output.  Variables are found under \nvar\n.\n\n\n\n\nvar.is_dark | var.is_light\n\n\n\n\nis_dark\n checks if the color scheme is a dark color scheme.  Alternatively, \nis_light\n checks if the color scheme is a light color scheme.\n\n\nExample\n:\n\n\n{%\n \nif\n \nvar.is_light\n \n%}\n\n\nhtml\n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n0.9\n)\n}}\n \n}\n\n\n{%\n \nelse\n \n%}\n\n\nhtml\n{\n \n{{\n.background\n|\ncss\n(\nbackground-color\n)|\nbrightness\n(\n1.1\n)\n}}\n \n}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\n\n\nvar.use_pygments\n\n\n\n\nChecks if the Pygments syntax highlighter is being used.\n\n\nExample\n:\n\n\n{%\n \nif\n \nvar.use_pygments\n \n%}\n\n\n{%\n \nif\n \nvar.is_light\n \n%}\n\n\n{{\ndefault\n|\npygments\n}}\n\n\n{%\n \nelse\n \n%}\n\n\n{{\nnative\n|\npygments\n}}\n\n\n{%\n \nendif\n \n%}\n\n\n{%\n \nendif\n \n%}\n\n\n\n\n\n\n\n\nvar.color_scheme\n\n\n\n\nRetrieves the current color schemes name.\n\n\nExample\n:\n\n\n{%\n \nif\n \n(\n\n    \nvar.color_scheme\n \nin\n \n(\n\n        \nPackages/Theme - Aprosopo/Tomorrow-Night-Eighties-Stormy.tmTheme\n,\n\n        \nPackages/Theme - Aprosopo/Tomorrow-Morning.tmTheme\n,\n\n    \n)\n\n\n)\n \n%}\n\n\na\n \n{\n \n{{\n.keyword.operator\n|\ncss\n(\ncolor\n)\n}}\n \n}\n\n\n{%\n \nelse\n \n%}\n\n\na\n \n{\n \n{{\n.support.function\n|\ncss\n(\ncolor\n)\n}}\n \n}\n\n\n{%\n \nendif\n \n%}", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#user-guide", 
            "text": "Using and configuring Sublime Markdown Popups.", 
            "title": "User Guide"
        }, 
        {
            "location": "/usage/#dependencies", 
            "text": "Your plugin must include the following Package Control dependencies:  { \n     * :   { \n         =3000 :   [ \n             pygments , \n             markdown , \n             mdpopups , \n             jinja2 , \n             markupsafe \n         ] \n     }  }", 
            "title": "Dependencies"
        }, 
        {
            "location": "/usage/#markdown-support", 
            "text": "MdPopups uses  Python Markdown  to parse Markdown and transform it into a tooltip.  The Markdown environment supports basic Markdown features, but also includes a number of specialty extensions to enhance the environment.  To keep the experience standardized for plugin use, tweaking the Markdown settings is not allowed.  MdPopups enables the following Python Markdown extensions:   attr_list  allows you to add HTML attributes to block and inline elements easily.  nl2br  turns new lines int  br  tags.  def_list  adds support for definition lists.  admonition  provides admonition blocks.  codehilite  provides syntax highlighted blocks.   MdPopups also includes a couple 3 rd  party extensions (some of which have been modified to work better in the Sublime Text environment).   superfences  provides support for nested fenced blocks. UML support is disabled.  betterem  is extension that aims to improve emphasis support in Python Markdown. MdPopups leaves it configured in its default state where underscores are handled intelligently:  _handled_intelligently_     handled_intelligently .  Asterisks can be used to do mid word emphasis:  em*pha*sis    em pha sis.  magiclink  auto links HTML links.  inlinehilite  allows for inline code highlighting:  `#!python import module`     import   module .", 
            "title": "Markdown Support"
        }, 
        {
            "location": "/usage/#api-usage", 
            "text": "MdPopups provides a handful of accessible functions.  show_popup   mdpopups.show_popup   Accepts Markdown and creates a Sublime popup tooltip.  By default, the Pygments syntax highlighter will be used for code highlighting.  Set  mdpopups.use_sublime_highlighter  to  true  in your  Preferences.sublime-settings  file if you would like to use the Sublime syntax highlighter.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    content  string  Yes   Markdown/HTML content to be used to create a tooltip.    md  bool  No  True  Defines whether the content is Markdown and needs to be converterted.    css  string  No  None  Additional CSS that will be injected.    flags  int  No  0  Flags to pass down to the Sublime Text  view.show_popup call.    location  int  No  -1  Location to show popup in view.  -1 means to show right under the first cursor.    max_width  int  No  320  Maximum width of the popup.    max_height  int  No  240  Maximum height of the popup.    on_navigate  function  No  None  Callback that receives one variable  href    on_hide  function  No  None  Callback for when the tooltip is hidden.        Developers Guidelines  If injecting your own CSS classes from a plugin, please namespace them by either giving them a very unique name (preferably with the plugin s name as part of the class) or use an additional namespace class (preferably with the plugin s name) and a specific class.  This way a user can target and override your class styling if desired.  Example - Unique Class Name :  .myplugin-myclass   {   ...   }    Example - Namespace Class :  .myplugin.myclass   {   ...   }    Also, do not try to override the style of existing base classes and elements with plugin injection, but use custom plugin classes so that you will only target what your plugin as specifically added special classes to.", 
            "title": "API Usage"
        }, 
        {
            "location": "/usage/#update_popup", 
            "text": "mdpopups.update_popup   Updates the current existing popup.  Set  mdpopups.use_sublime_highlighter  to  true  in your  Preferences.sublime-settings  file if you would like to use the Sublime syntax highlighter.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.    content  string  Yes   Markdown/HTML content to be used to create a tooltip.    md  bool  No  True  Defines whether the content is Markdown and needs to be converterted.    css  string  No  None  CSS text that should be used instead of loading a theme.       hide_popup   mdpopups.hide_popup   Hides the current popup.  Included for convenience and consistency.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   A Sublime Text view object.       clear_cache   mdpopups.clear_cache  Clears the CSS theme related caches.   md2html   mdpopups.md2html   Exposes the Markdown to HTML converter in case it is desired to parse only a section of markdown.  This works well for someone who wants to work directly in HTML, but might want to still have fragments of markdown that they would like to occasionally convert. Code highlighting will use either Pygments or the native Sublime syntax highlighter.  Set  mdpopups.use_sublime_highlighter  to  true  if you want to use the Sublime syntax highlighter.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   Sublime text View object.    markup  bool  Yes   The markup code to be converted.       color_box   mdpopups.color_box   Generates a color preview box image encoded in base64 and formated to be inserted right in your your Markdown or HTML code as an  img  tag.     Parameter  Type  Required  Default  Description      colors  [string]  Yes   A list of color strings formatted as  #RRGGBBAA where  R is the red channel,  G is the green channel,  B is the blue channel, and  A is the alpha channel.    border  string  Yes   The color for the color box border.  Input is a RGB color formatted as  #RRGGBB    border2  string  No  None  The optional secondary border color.  This is great if you are going to have it on a light and dark backgrounds.  You can use a double border so the color stands out regardless of the background.  Input is a RGB color formatted as  #RRGGBB    height  int  No  32  Height of color box.    width  int  No  32  Width of color box.    border_size  int  No  1  Width of the color box border.  If using  border2  the value should be set to at least 2 to see both colors.    check_size  int  No  4  Size of checkered box squares used for the background of transparent colors.    max_colors  int  No  5  Max number of colors that will be evaluated in the  colors parameter.  Multiple colors are used to to create palette boxes showing multiple colors lined up horizontally.       syntax_highlight   mdpopups.syntax_highlight   Allows for syntax highlighting outside the Markdown environment.  You can just feed it code directly and give it the language of your choice, and you will be returned a block of HTML that has been syntax highlighted.  This does not have to be in markdown format.  Just give it plain text to convert to highlighted HTML.  syntax_highlight  will use either Pygments or the native Sublime syntax highlighter.  Set  mdpopups.use_sublime_highlighter  to  true  if you want to use the Sublime syntax highlighter.     Parameter  Type  Required  Default  Description      view  sublime.View  Yes   Sublime text View object.    src  string  Yes   The source code to be converted.  No  ```  needed.    language  string  No  None  Specifies the language to highlight as.    inline  bool  No  False  Will return the code formatted for inline display.", 
            "title": "update_popup"
        }, 
        {
            "location": "/usage/#global-user-settings", 
            "text": "All settings for MdPopups are placed in Sublime's Preferences.sublime-settings`.  They are global and work no for whatever plugin uses the MdPopups API.  mdpopups.debug  Turns on debug mode.  This will dump out all sorts of info to the console.  Such as content before parsing to HTML, final HTML output, etc.  This is more useful for plugin developers.       mdpopups.debug :   true ,   mdpopups.disable  Global kill switch to prevent popups (created by MdPopups) from appearing.       mdpopups.disable :   true ,   mdpopups.cache_refresh_time  Control how long a CSS theme file will be in the cache before being refreshed.  Value should be a positive integer greater than 0.  Units are in minutes.  Default is 30.       mdpopups.cache_refresh_time :   30 ,   mdpopups.cache_limit  Control how many CSS theme files will be kept in cache at any given time.  Value should be a positive integer greater than or equal to 0.       mdpopups.cache_limit :   10   mdpopups.use_sublime_highlighter  Controls whether the Pygments or the native Sublime syntax highlighter is used for code highlighting.  This affects code highlighting in Markdown conversion] via and when  md2html  and when code is directly processed using  syntax_highlight . To learn more about the syntax highlighter see  Syntax Highlighting .       mdpopups.use_sublime_highlighter :   true   mdpopups.user_css  Overrides the default CSS theme.  Value should be a relative path pointing to the CSS theme file:  Packages/User/my_custom_theme.css .  Slashes should be forward slashes. By default, it will point to  Packages/User/mdpopups.css .       mdpopups.use_sublime_highlighter :   Packages/User/mdpopups.css   mdpopups.sublime_user_lang_map  This is a special setting allowing the mapping of personal syntax languages which are not yet included or will not be included in the official mapping table.  You can either define your own new entry, or use the name of an existing entry to extend language keywords or syntax languages.  When extending, user keywords and languages will be cycled through first.       mdpopups.sublime_user_lang_map :   { \n         language :   (( keywords ,),   ( MyPackage/MySyntaxLanguage )) \n     }   Example :  mdpopups.sublime_user_lang_map :   { \n     javascript :   (( javascript ,   js ),   ( JavaScript/JavaScript ,   JavaScriptNext - ES6 Syntax/JavaScriptNext ))  }    For a list of all currently supported syntax mappings, see the official  mapping file .", 
            "title": "Global User Settings"
        }, 
        {
            "location": "/usage/#syntax-highlighting", 
            "text": "MdPopups has two syntax highlighting methods: one is Pygments, the other is Sublimes native syntax highlighters.  When developing a plugin, it is wise to test out both as a syntax mapping may be needed for the Sublime Syntax Highlighter; mappings can be added locally and/or to the main repository via pull requests.  Pygments  Pygments has a great variety of highlighters out of the box.  It also comes with a number of built-in color schemes that can be used.  Pygments themes are loaded up using the  CSS template .  You can either specify an existing one, paste your own in.  Due to the limitations of the Sublime HTML and CSS engine, you must format your personal Pygments them to work well.  Traditionally Pygments CSS classes are given not only syntax classes applied to each span, but an overall class as assigned to the div wrapper as well.  For instance, a class for whitespace may look like this (where  .highlight  is the div wrapper s class and  .w  i the span s class):  .highlight   .w   {   color :   #cccccc   }   /* Text.Whitespace */   But the sublime CSS engine doesn t support parent and child classes like  .highlight   .w ; it supports either single or multiple classes on one element like  .class1.class2 .  Because of this, the  .highlight  class must be stripped out.  .w   {   color :   #cccccc   }   /* Text.Whitespace */   MdPopups also needs both classes  .highlgiht  and  .inline-highlight  to be styled with the foreground and background color:  .highlight ,   .inline-highlight   {   background-color :   #f8f8f8 ;   color :   #4d4d4c   }   Full Example :  .highlight ,   .inline-highlight   {   background-color :   #f8f8f8 ;   color :   #4d4d4c   }  .c   {   color :   #8e908c ;   font-style :   italic   }   /* Comment */  .err   {   color :   #c82829   }   /* Error */  .k   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword */  .l   {   color :   #f5871f   }   /* Literal */  .n   {   color :   #4d4d4c   }   /* Name */  .o   {   color :   #3e999f   }   /* Operator */  .p   {   color :   #4d4d4c   }   /* Punctuation */  .cm   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Multiline */  .cp   {   color :   #8e908c ;   font-weight :   bold   }   /* Comment.Preproc */  .c1   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Single */  .cs   {   color :   #8e908c ;   font-style :   italic   }   /* Comment.Special */  .gd   {   color :   #c82829   }   /* Generic.Deleted */  .ge   {   font-style :   italic   }   /* Generic.Emph */  .gh   {   color :   #4d4d4c ;   font-weight :   bold   }   /* Generic.Heading */  .gi   {   color :   #718c00   }   /* Generic.Inserted */  .gp   {   color :   #8e908c ;   font-weight :   bold   }   /* Generic.Prompt */  .gs   {   font-weight :   bold   }   /* Generic.Strong */  .gu   {   color :   #3e999f ;   font-weight :   bold   }   /* Generic.Subheading */  .kc   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Constant */  .kd   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Declaration */  .kn   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Namespace */  .kp   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Pseudo */  .kr   {   color :   #8959a8 ;   font-weight :   bold   }   /* Keyword.Reserved */  .kt   {   color :   #eab700 ;   font-weight :   bold   }   /* Keyword.Type */  .ld   {   color :   #718c00   }   /* Literal.Date */  .m   {   color :   #f5871f   }   /* Literal.Number */  .s   {   color :   #718c00   }   /* Literal.String */  .na   {   color :   #4271ae   }   /* Name.Attribute */  .nb   {   color :   #4271ae   }   /* Name.Builtin */  .nc   {   color :   #c82829 ;   font-weight :   bold   }   /* Name.Class */  .no   {   color :   #c82829   }   /* Name.Constant */  .nd   {   color :   #3e999f   }   /* Name.Decorator */  .ni   {   color :   #4d4d4c   }   /* Name.Entity */  .ne   {   color :   #c82829 ;   font-weight :   bold   }   /* Name.Exception */  .nf   {   color :   #4271ae ;   font-weight :   bold   }   /* Name.Function */  .nl   {   color :   #4d4d4c   }   /* Name.Label */  .nn   {   color :   #4d4d4c   }   /* Name.Namespace */  .nx   {   color :   #4271ae   }   /* Name.Other */  .py   {   color :   #4d4d4c   }   /* Name.Property */  .nt   {   color :   #c82829   }   /* Name.Tag */  .nv   {   color :   #c82829   }   /* Name.Variable */  .ow   {   color :   #3e999f   }   /* Operator.Word */  .w   {   color :   #4d4d4c   }   /* Text.Whitespace */  .mb   {   color :   #f5871f   }   /* Literal.Number.Bin */  .mf   {   color :   #f5871f   }   /* Literal.Number.Float */  .mh   {   color :   #f5871f   }   /* Literal.Number.Hex */  .mi   {   color :   #f5871f   }   /* Literal.Number.Integer */  .mo   {   color :   #f5871f   }   /* Literal.Number.Oct */  .sb   {   color :   #718c00   }   /* Literal.String.Backtick */  .sc   {   color :   #4d4d4c   }   /* Literal.String.Char */  .sd   {   color :   #8e908c   }   /* Literal.String.Doc */  .s2   {   color :   #718c00   }   /* Literal.String.Double */  .se   {   color :   #f5871f   }   /* Literal.String.Escape */  .sh   {   color :   #718c00   }   /* Literal.String.Heredoc */  .si   {   color :   #f5871f   }   /* Literal.String.Interpol */  .sx   {   color :   #718c00   }   /* Literal.String.Other */  .sr   {   color :   #718c00   }   /* Literal.String.Regex */  .s1   {   color :   #718c00   }   /* Literal.String.Single */  .ss   {   color :   #718c00   }   /* Literal.String.Symbol */  .bp   {   color :   #f5871f   }   /* Name.Builtin.Pseudo */  .vc   {   color :   #c82829   }   /* Name.Variable.Class */  .vg   {   color :   #c82829   }   /* Name.Variable.Global */  .vi   {   color :   #c82829   }   /* Name.Variable.Instance */  .il   {   color :   #f5871f   }   /* Literal.Number.Integer.Long */   Sublime Syntax Highlighter  MdPopups can also use Sublime s internal syntax highlighter to highlight your code.  The benefit here is that you get code highlighting in your popup that matches your current theme.  The highlighting ability is dependent upon what syntax packages you have installed in Sublime.  It also depends on whether they are enabled and mapped to a language keyword.  Pull requests are welcome to expand and keep the  language mapping  updated.  You can also define in your  Preferences.sublime-settings  file additional mappings to either personal syntax files, or while waiting for your mapping changes to be merged and released.  See  mdpopups.sublime_user_lang_map  for more info.  In your CSS template it is usually a good idea to generically specify the code wrapper background colors.  With the  CSS templates , this is very easy:  .highlight ,   .inline-highlight   {   {{ .background | css }}   }", 
            "title": "Syntax Highlighting"
        }, 
        {
            "location": "/usage/#css-styling", 
            "text": "MdPopups was design to give a universal way of displaying and styling tooltips via plugins, but also provide the user an easy way to control the look.  MdPopups provides a simple base CSS that styles the basic HTML tags that can be used in the Markdown parser.  On top of that it then parses your current Sublime color scheme and generates CSS that includes styling for all the  standard TextMate scopes  (and only those listed scopes) found in your color scheme.  It then uses those scopes via in a default template to highlight your tooltips to match your current color scheme.  Templates are used so that a user can easily tap into all the colors, color filters, and other usefull logic to control their tooltips in one place without having to hard code a specific CSS for a specific color scheme.  Even though a plugin can additionally insert new scopes on demand when calling the popup API, a user can override anything and everything by providing their own  CSS template .  The template is fairly powerful and flexible.", 
            "title": "CSS Styling"
        }, 
        {
            "location": "/usage/#css-templates", 
            "text": "MdPoups provides a  base.css  that formats the general look of the HTML elements (padding, size, etc.).  On top of that, it provides a  default.css  template which applies more superficial styling such as colors, Pygments themes, etc.  It uses the Jinja2 template environment to give direct access to things like color scheme colors, names, and other useful information.  In general,  default.css  should provide most of what everyone  needs .  But if you  want  greater control, you can create your own CSS template which MdPopups will use instead of  default.css .  Template Colors  With the template environment, colors from the current Sublime color scheme can be accessed and manipulated.  Access to the Sublime color scheme styles are done via the  css  filter.   css   Retrieves the style for a specific TextMate scope from a Sublime color scheme.  By specifying either  .foreground ,  .background , or anyone of the standard TextMate scopes and then paring it with the  css  filter, all the related styles of the specified scope will be inserted into the css document.  Example :  This:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ .comment | css }}   }   Might become this:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   color :   #888888 ,   font-style :   italic   }   If you need to get at a specific CSS attribute, you can specify its name in the  css  filter (available attributes are  color ,  background-color ,  font-style , and  font-weight ).  This:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ .comment | css ( color ) }}   }   Would then only include the color:  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   color :   #888888   }   Some scopes might not be have colors assigned to them in a them, so multiple scopes can be defined, and the first one that matches will be used:  /* If `keyword.operator` is not explicitly used, fallback to `.keyword` */  h1 ,   h2 ,   h3 ,   h4 ,   h5 ,   h6   {   {{ .keyword.operator, .keyword | css ( color ) }}   }     If desired you can convert a foreground color to a background color or vice versa.  To convert to a foreground color, you can use the  foreground  filter.  To convert to a background color, you can use the  background  filter.   foreground   Convert a background to a foreground.  Example :  body   {   {{ .background | css ( background-color )| foreground }}   }     background   Convert a foreground to a background.  Example :  body   {   {{ .foreground | css ( color )| background }}   }      Template Color Filtering  MdPopups also provides a number of color filters within the template environment that can manipulate the colors.  For instance, lets say you had your tooltip is the same color as the view window and it is difficult to see where the tooltip starts and ends.  You can take the color schemes background and apply a brightness filter to it allowing you now see the tooltip clearly.  Here we can make the background of the tooltip darker:  body   {   {{ .background | css ( background-color )| brightness ( 0.9 ) }}   }   Color filters take a single color attribute of the form  key: value; .  So when feeding the filter with CSS, it is advised to specify the attribute in the  css  filter to limit the return to only one attribute as shown above; it may be difficult to tell how many attributes  css  could return without explicitly specifying attribute.  Color filters only take either  color  or  background-color  attributes.  Filters can be chained if more intensity is needed as some filters may clamp the value in one call. Multiple kinds of filters can also be chained together.  These are all the available filters:   brightness   Shifts brightness either dark or lighter. Brightness is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.  Example - Darken :  body   {   {{ .background | css ( background-color )| brightness ( 0.9 ) }}   }    Example - Lighten :  body   {   {{ .background | css ( background-color )| brightness ( 1.1 ) }}   }     saturation   Shifts the saturation either to right (saturate) or the left (desaturate).  Saturation is relative to 1 where 1 means no change.  Accepted values are floats that are greater than 0.  Ranges are clamped between 0 and 2.  Example - Desaturate :  body   {   {{ .background | css ( background-color )| saturation ( 0.9 ) }}   }    Example - Saturate :  body   {   {{ .background | css ( background-color )| saturation ( 1.1 ) }}   }     grayscale   Filters all colors to a grayish tone.  Example :  body   {   {{ .background | css ( background-color )| grayscale }}   }     sepia   Filters all colors to a sepia tone.  Example :  body   {   {{ .background | css ( background-color )| sepia }}   }     invert   Inverts a color.  Example :  body   {   {{ .background | css ( background-color )| invert }}   }     colorize   Filters all colors to a shade of the specified hue.  Think grayscale, but instead of gray, you define a non-gray hue.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Example :  body   {   {{ .background | css ( background-color )| colorize ( 30 ) }}   }     hue   Shifts the current hue either to the left or right.  The values are angular dimensions starting at the red primary at 0\u00b0, passing through the green primary at 120\u00b0 and the blue primary at 240\u00b0, and then wrapping back to red at 360\u00b0.  Values can either be negative to shift left or positive to shift the hue to the right.  Example - Left Shift :  body   {   {{ .background | css ( background-color )| hue (- 30 ) }}   }    Example - Left Right :  body   {   {{ .background | css ( background-color )| hue ( 30 ) }}   }     fade   Fades a color. Essentially it is like apply transparency to the color allowing the color schemes base background color to show through.  Example - Fade 50% :  body   {   {{ .foreground | css ( color )| fade ( 0.5 ) }}   }      Include CSS  The template environment allows for retrieving built-in Pygments CSS or retrieving CSS resources from the Sublime Packages.   pygments   Retrieve a built-in Pygments color scheme.  Example :  {{ native | pygments }}     getcss   Retrieve a CSS file from Sublime s  Packages  folder.  CSS retrieved in this manner can include template variables and filters.  Example :  {{ Packages/User/aprosopo-dark.css | getcss }}", 
            "title": "CSS Templates"
        }, 
        {
            "location": "/usage/#template-variables", 
            "text": "The template environment provides a couple of variables that can be used to conditionally alter the CSS output.  Variables are found under  var .   var.is_dark | var.is_light   is_dark  checks if the color scheme is a dark color scheme.  Alternatively,  is_light  checks if the color scheme is a light color scheme.  Example :  {%   if   var.is_light   %}  html {   {{ .background | css ( background-color )| brightness ( 0.9 ) }}   }  {%   else   %}  html {   {{ .background | css ( background-color )| brightness ( 1.1 ) }}   }  {%   endif   %}     var.use_pygments   Checks if the Pygments syntax highlighter is being used.  Example :  {%   if   var.use_pygments   %}  {%   if   var.is_light   %}  {{ default | pygments }}  {%   else   %}  {{ native | pygments }}  {%   endif   %}  {%   endif   %}     var.color_scheme   Retrieves the current color schemes name.  Example :  {%   if   ( \n     var.color_scheme   in   ( \n         Packages/Theme - Aprosopo/Tomorrow-Night-Eighties-Stormy.tmTheme , \n         Packages/Theme - Aprosopo/Tomorrow-Morning.tmTheme , \n     )  )   %}  a   {   {{ .keyword.operator | css ( color ) }}   }  {%   else   %}  a   {   {{ .support.function | css ( color ) }}   }  {%   endif   %}", 
            "title": "Template Variables"
        }, 
        {
            "location": "/textmate_scopes/", 
            "text": "TextMate Scopes\n\n\nStandardized scopes supported by TextMate\n\n\n\n\nSupported Scopes\n\n\nMarkdown Popups supports the standard TextMate scopes found in the \nmanual\n plus \nforeground\n and \nbackground\n.\n\n\n\n\ncomment\n\n\ncomment.line\n\n\ncomment.line.double-slash\n\n\ncomment.line.double-dash\n\n\ncomment.line.number-sign\n\n\ncomment.line.percentage\n\n\ncomment.line.character\n\n\ncomment.block\n\n\ncomment.block.documentation\n\n\nconstant\n\n\nconstant.numeric\n\n\nconstant.character\n\n\nconstant.language\n\n\nconstant.other\n\n\nentity\n\n\nentity.name\n\n\nentity.name.function\n\n\nentity.name.type\n\n\nentity.name.tag\n\n\nentity.name.section\n\n\nentity.other\n\n\nentity.other.inherited-class\n\n\nentity.other.attribute-name\n\n\ninvalid\n\n\ninvalid.illegal\n\n\ninvalid.deprecated\n\n\nkeyword\n\n\nkeyword.control\n\n\nkeyword.operator\n\n\nkeyword.other\n\n\nmarkup\n\n\nmarkup.underline\n\n\nmarkup.underline.link\n\n\nmarkup.bold\n\n\nmarkup.heading\n\n\nmarkup.italic\n\n\nmarkup.list\n\n\nmarkup.list.numbered\n\n\nmarkup.list.unnumbered\n\n\nmarkup.quote\n\n\nmarkup.raw\n\n\nmarkup.other\n\n\nmeta\n\n\nstorage\n\n\nstorage.type\n\n\nstorage.modifier\n\n\nstring\n\n\nstring.quoted\n\n\nstring.quoted.single\n\n\nstring.quoted.double\n\n\nstring.quoted.triple\n\n\nstring.quoted.other\n\n\nstring.unquoted\n\n\nstring.interpolated\n\n\nstring.regexp\n\n\nstring.other\n\n\nsupport\n\n\nsupport.function\n\n\nsupport.class\n\n\nsupport.type\n\n\nsupport.constant\n\n\nsupport.variable\n\n\nsupport.other\n\n\nvariable.parameter\n\n\nvariable.language\n\n\nvariable.other", 
            "title": "TextMate Scopes"
        }, 
        {
            "location": "/textmate_scopes/#textmate-scopes", 
            "text": "Standardized scopes supported by TextMate", 
            "title": "TextMate Scopes"
        }, 
        {
            "location": "/textmate_scopes/#supported-scopes", 
            "text": "Markdown Popups supports the standard TextMate scopes found in the  manual  plus  foreground  and  background .   comment  comment.line  comment.line.double-slash  comment.line.double-dash  comment.line.number-sign  comment.line.percentage  comment.line.character  comment.block  comment.block.documentation  constant  constant.numeric  constant.character  constant.language  constant.other  entity  entity.name  entity.name.function  entity.name.type  entity.name.tag  entity.name.section  entity.other  entity.other.inherited-class  entity.other.attribute-name  invalid  invalid.illegal  invalid.deprecated  keyword  keyword.control  keyword.operator  keyword.other  markup  markup.underline  markup.underline.link  markup.bold  markup.heading  markup.italic  markup.list  markup.list.numbered  markup.list.unnumbered  markup.quote  markup.raw  markup.other  meta  storage  storage.type  storage.modifier  string  string.quoted  string.quoted.single  string.quoted.double  string.quoted.triple  string.quoted.other  string.unquoted  string.interpolated  string.regexp  string.other  support  support.function  support.class  support.type  support.constant  support.variable  support.other  variable.parameter  variable.language  variable.other", 
            "title": "Supported Scopes"
        }, 
        {
            "location": "/faq/", 
            "text": "F.A.Q.\n\n\nFrequently asked questions.\n\n\n\n\nQuestions\n\n\n\n\n\n\nWhy don\nt \npre\n tags work right?\n\n\nThis is because the HTML engine in Sublime treats \npre\n tags just as a normal block element; it doesn\nt treat the content as preformatted.  When MdPopups creates code blocks, it actually specially formats the blocks.  It converts tabs to 4 spaces, any contiguous spaces after the first are converted to \nnbsp;\n.  And lastly, new lines get converted to \nbr\n tags.\n\n\n\n\n\n\nWhy in code blocks do tabs get converted to 4 spaces?\n\n\nBecause I like it that way.  If you are planning on have a snippet of text sent through the syntax highlighter and do not want your tabs to be converted to 4 spaces, you should convert it to the number of spaces you do like \nbefore\n sending it through the syntax highlighter.\n\n\n\n\n\n\nWhy does \ninsert element\n not work, or cause the tooltip not to show?\n\n\nBecause Sublime\ns HTML engine is extremely limited.  Though I do not have a complete list of all supported elements, you should keep things basic.  Things like \ntable\n will not work.\n\n\n\n\n\n\nWhy can\nt I get CSS selectors like this to work: \ndiv\n \np\n \n{\n \n...\n \n}\n?\n\n\nSublime\ns CSS handling is very limited and cannot handle parent and child selectors etc.  It handles one element at a time only.  You can chain classes: \n.myclass.myotherclass\n, but you \ncannot\n have a parent and a child class selector or elementes: \n.myclass\n \n.myotherclass\n.\n\n\n\n\n\n\nI tried pushing a massive amount of HTML through the tooltip and Sublime crashed.  What do I do?\n\n\nDon\nt do that.  I won\nt bother getting into the fact that technically Sublime should handle these situation gracefully, so I\nll just say that the tooltip API has some limitations; use it reasonably.", 
            "title": "F.A.Q"
        }, 
        {
            "location": "/faq/#faq", 
            "text": "Frequently asked questions.", 
            "title": "F.A.Q."
        }, 
        {
            "location": "/faq/#questions", 
            "text": "Why don t  pre  tags work right?  This is because the HTML engine in Sublime treats  pre  tags just as a normal block element; it doesn t treat the content as preformatted.  When MdPopups creates code blocks, it actually specially formats the blocks.  It converts tabs to 4 spaces, any contiguous spaces after the first are converted to  nbsp; .  And lastly, new lines get converted to  br  tags.    Why in code blocks do tabs get converted to 4 spaces?  Because I like it that way.  If you are planning on have a snippet of text sent through the syntax highlighter and do not want your tabs to be converted to 4 spaces, you should convert it to the number of spaces you do like  before  sending it through the syntax highlighter.    Why does  insert element  not work, or cause the tooltip not to show?  Because Sublime s HTML engine is extremely limited.  Though I do not have a complete list of all supported elements, you should keep things basic.  Things like  table  will not work.    Why can t I get CSS selectors like this to work:  div   p   {   ...   } ?  Sublime s CSS handling is very limited and cannot handle parent and child selectors etc.  It handles one element at a time only.  You can chain classes:  .myclass.myotherclass , but you  cannot  have a parent and a child class selector or elementes:  .myclass   .myotherclass .    I tried pushing a massive amount of HTML through the tooltip and Sublime crashed.  What do I do?  Don t do that.  I won t bother getting into the fact that technically Sublime should handle these situation gracefully, so I ll just say that the tooltip API has some limitations; use it reasonably.", 
            "title": "Questions"
        }, 
        {
            "location": "/contributing/", 
            "text": "Contributing \n Support\n\n\nSteps for contributing and getting support.\n\n\n\n\nOverview\n\n\n\n\n\n\n\n\nSublime Versions\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nST3\n\n\nFully supported and actively maintained.\n\n\n\n\n\n\n\n\nContribution from the community is encouraged and can be done in a variety of ways:\n\n\n\n\nBug reports.\n\n\nReviewing code.\n\n\nCode patches via pull requests.\n\n\nDocumentation improvements via pull requests.\n\n\n\n\nBug Reports\n\n\n\n\n\n\nPlease \nread the documentation\n and \nsearch the issue tracker\n to try to find the answer to your question \nbefore\n posting an issue.\n\n\n\n\n\n\nWhen creating an issue on the repository, please provide as much info as possible:\n\n\n\n\nSublime Text build.\n\n\nOperating system.\n\n\nErrors in console.\n\n\nDetailed description of the problem.\n\n\nExamples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.\n\n\n\n\nThe more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.\n\n\n\n\n\n\nBe prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.\n\n\n\n\n\n\nReviewing Code\n\n\nTake part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.\n\n\nPull Requests\n\n\nPull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.\n\n\nContinuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.\n\n\nFeel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.\n\n\nRunning Validation Tests\n\n\nLinting is performed on the entire project with \nflake8\n, \nflake8_docstrings\n, and \npep8-naming\n.  These can be installed via:\n\n\npip install flake8\npip install flake8_docstrings\npip install pep8-naming\n\n\n\n\n\nLinting is performed with the following command:\n\n\nflake8 .\n\n\n\n\n\nDocumentation Improvements\n\n\nA ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn\nt be any need to run validation tests if only updating documentation.\n\n\nYou don\nt have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of \nmkdocs\n with my own custom Python Markdown \nextensions\n to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is \nmkdocs serve\n from the root directory.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#contributing-support", 
            "text": "Steps for contributing and getting support.", 
            "title": "Contributing &amp; Support"
        }, 
        {
            "location": "/contributing/#overview", 
            "text": "Sublime Versions  Description      ST3  Fully supported and actively maintained.     Contribution from the community is encouraged and can be done in a variety of ways:   Bug reports.  Reviewing code.  Code patches via pull requests.  Documentation improvements via pull requests.", 
            "title": "Overview"
        }, 
        {
            "location": "/contributing/#bug-reports", 
            "text": "Please  read the documentation  and  search the issue tracker  to try to find the answer to your question  before  posting an issue.    When creating an issue on the repository, please provide as much info as possible:   Sublime Text build.  Operating system.  Errors in console.  Detailed description of the problem.  Examples for reproducing the error.  You can post pictures, but if specific text or code is required to reproduce the issue, please provide the text in a plain text format for easy copy/paste.   The more info provided the greater the chance someone will take the time to answer, implement, or fix the issue.    Be prepared to answer questions and provide additional information if required.  Issues in which the creator refuses to respond to follow up questions will be marked as stale and closed.", 
            "title": "Bug Reports"
        }, 
        {
            "location": "/contributing/#reviewing-code", 
            "text": "Take part in reviewing pull requests and/or reviewing direct commits.  Make suggestions to improve the code and discuss solutions to overcome weakness in the algorithm.", 
            "title": "Reviewing Code"
        }, 
        {
            "location": "/contributing/#pull-requests", 
            "text": "Pull requests are welcome, and if you plan on contributing directly to the code, there are a couple of things to be mindful of.  Continuous integration tests on are run on all pull requests and commits via Travis CI.  When making a pull request, the tests will automatically be run, and the request must pass to be accepted.  You can (and should) run these tests before pull requesting.  If it is not possible to run these tests locally, they will be run when the pull request is made, but it is strongly suggested that requesters make an effort to verify before requesting to allow for a quick, smooth merge.  Feel free to use a virtual environment if you are concerned about installing any of the Python packages.  In the future, I may use tox, but as I currently only test on Python 3.3, I wanted to keep things simple.  Running Validation Tests  Linting is performed on the entire project with  flake8 ,  flake8_docstrings , and  pep8-naming .  These can be installed via:  pip install flake8\npip install flake8_docstrings\npip install pep8-naming  Linting is performed with the following command:  flake8 .", 
            "title": "Pull Requests"
        }, 
        {
            "location": "/contributing/#documentation-improvements", 
            "text": "A ton of time has been spent not only creating and supporting this plugin, but also spent making this documentation.  If you feel it is still lacking, show your appreciation for the plugin by helping to improve the documentation.  Help with documentation is always appreciated and can be done via pull requests.  There shouldn t be any need to run validation tests if only updating documentation.  You don t have to render the docs locally before pull requesting, but if you wish to, I currently use a combination of  mkdocs  with my own custom Python Markdown  extensions  to render the docs.  You can preview the docs if you install these two packages.  The command for previewing the docs is  mkdocs serve  from the root directory.", 
            "title": "Documentation Improvements"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\n\n\nSublime Markdown Popups is released under the MIT license.\n\n\nCopyright \n 2015 Isaac Muse \n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \nSoftware\n), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n\nTHE SOFTWARE IS PROVIDED \nAS IS\n, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "Sublime Markdown Popups is released under the MIT license.  Copyright   2015 Isaac Muse   Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  Software ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.  THE SOFTWARE IS PROVIDED  AS IS , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.", 
            "title": "License"
        }
    ]
}